{
	"info": {
		"_postman_id": "7aa62712-6669-4ec0-8d14-7b84e737d637",
		"name": "Marvel API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18544044",
		"_collection_link": "https://www.postman.com/grey-firefly-842601/workspace/testes-api-da-marvel/collection/18544044-7aa62712-6669-4ec0-8d14-7b84e737d637?action=share&creator=18544044&source=collection_link"
	},
	"item": [
		{
			"name": "Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"const characterId = responseJson.data.results[0].id;",
							"pm.environment.set(\"characterId\", characterId);",
							"",
							"pm.test(\"Status code é 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verificar o corpo da resposta\", function () {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.code).to.eql(200);",
							"",
							"    pm.expect(responseJson.status).to.eql(\"Ok\");",
							"",
							"    pm.expect(responseJson.attributionText).to.contain(\"MARVEL\");",
							"",
							"    pm.expect(responseJson).to.have.property('etag');",
							"",
							"    pm.expect(responseJson.etag.length).to.eql(40);",
							"",
							"});",
							"",
							"pm.test(\"Verificar os headers\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"if (pm.response.code !== 200) {",
							"    try {",
							"        const responseJson = pm.response.json();",
							"        if (responseJson.hasOwnProperty('error')) {",
							"            console.error(\"Erro na requisição! Status code:\", pm.response.code, \"Erro:\", responseJson.error);",
							"        } else {",
							"            console.error(\"Erro na requisição! Status code:\", pm.response.code);",
							"        }",
							"    } catch (error) {",
							"        console.error(\"Erro na requisição! Status code:\", pm.response.code);",
							"    }",
							"    pm.test(\"Requisição com erro\", function () {",
							"        pm.expect(pm.response.code).to.eql(200);",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{API_PUBLIC_KEY}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apikey",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BASE_URL}}/v1/public/characters?hash={{HASH}}&ts={{TS}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"v1",
						"public",
						"characters"
					],
					"query": [
						{
							"key": "hash",
							"value": "{{HASH}}"
						},
						{
							"key": "ts",
							"value": "{{TS}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CharacterId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code é 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verificar o corpo da resposta\", function () {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.code).to.eql(200);",
							"",
							"    pm.expect(responseJson.status).to.eql(\"Ok\");",
							"",
							"    pm.expect(responseJson.attributionText).to.contain(\"MARVEL\");",
							"",
							"    pm.expect(responseJson.data).to.not.be.empty;",
							"",
							"    pm.expect(responseJson.data.results).to.be.an('array').and.to.have.length.above(0);",
							"",
							"    pm.environment.set(\"characterId\", responseJson.data.results[0].id);",
							"",
							"    pm.expect(responseJson.data.results[0].name).to.be.a('string');",
							"",
							"    pm.expect(responseJson.data.results[0].description).to.be.a('string');",
							"",
							"    pm.expect(responseJson.data.results[0].thumbnail).to.have.property('path');",
							"    pm.expect(responseJson.data.results[0].thumbnail).to.have.property('extension');",
							"",
							"    pm.expect(responseJson).to.have.property('etag');",
							"    pm.expect(responseJson.etag.length).to.eql(40);",
							"});",
							"",
							"pm.test(\"Verificar os headers\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get('API_PUBLIC_KEY')) {",
							"    console.error('API_PUBLIC_KEY não está definida no ambiente.');",
							"    pm.environment.set('API_KEY_VALID', false);",
							"} else {",
							"    console.log('API_PUBLIC_KEY definida é válida:', pm.environment.get('API_PUBLIC_KEY'));",
							"    pm.environment.set('API_KEY_VALID', true);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/v1/public/characters/{{characterId}}?hash={{HASH}}&ts={{TS}}&apikey={{API_PUBLIC_KEY}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"v1",
						"public",
						"characters",
						"{{characterId}}"
					],
					"query": [
						{
							"key": "hash",
							"value": "{{HASH}}"
						},
						{
							"key": "ts",
							"value": "{{TS}}"
						},
						{
							"key": "apikey",
							"value": "{{API_PUBLIC_KEY}}"
						}
					]
				}
			},
			"response": []
		}
	]
}